name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type check
      run: npm run typecheck
      
    - name: Run tests
      run: npm run test
      
    - name: Build application
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to server with systemd
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "$DEPLOY_KEY" > deploy_key
        chmod 600 deploy_key
        
        # Ensure deploy_key and archive are always cleaned up
        trap 'rm -f deploy_key book-lighthouse-app.tar.gz' EXIT
        
        # Create deployment archive
        tar -czf book-lighthouse-app.tar.gz dist package.json package-lock.json ecosystem.config.js deploy-setup.sh
        
        # Upload files to server
        scp -i deploy_key -o StrictHostKeyChecking=no book-lighthouse-app.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/
        
        # Deploy on server with PM2
        ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          cd /tmp
          
          # Application configuration
          APP_NAME="book-lighthouse-api"
          APP_DIR="/opt/$APP_NAME"
          
          # Create necessary directories
          sudo mkdir -p $APP_DIR
          sudo mkdir -p /var/log/book-lighthouse
          sudo chown -R $USER:$USER /var/log/book-lighthouse
          
          # Stop and delete specific app if exists (ignore if not found)
          pm2 delete $APP_NAME || true
          
          # Backup current deployment
          sudo cp -r $APP_DIR $APP_DIR-backup-$(date +%Y%m%d-%H%M%S) || true
          
          # Extract new deployment to temporary location
          mkdir -p ${APP_NAME}-deploy
          tar -xzf book-lighthouse-app.tar.gz -C ${APP_NAME}-deploy/
          cd ${APP_NAME}-deploy
          
          # Install production dependencies with memory limit (fallback to regular npm if systemd-run fails)
          systemd-run --scope -p MemoryMax=512M -p MemoryHigh=480M npm ci --omit=dev || npm ci --omit=dev
          
          # Deploy to production location
          sudo cp -r dist package.json package-lock.json node_modules ecosystem.config.js $APP_DIR/
          sudo chown -R $USER:$USER $APP_DIR
          
          # Start/reload PM2 app
          cd $APP_DIR
          pm2 startOrReload ecosystem.config.js --env production
          pm2 save
          
          # Clean up
          cd /
          rm -rf /tmp/${APP_NAME}-deploy /tmp/book-lighthouse-app.tar.gz
          
          echo "Deployment completed. PM2 status:"
          pm2 status
        EOF
        
        # Files will be cleaned up automatically by trap